extern "C" {
  
  #include "user_interface.h"
}
#include <EEPROM.h>

#include <ArduinoJson.h>
#if ARDUINOJSON_VERSION_MAJOR != 5
#error Please upgrade/downgrade ArduinoJSON library to version 5!
#endif

#include "oui.h"
#include "language.h"
#include "functions.h"
#include "Settings.h"
#include "Names.h"
#include "SSIDs.h"
#include "Scan.h"
#include "Attack.h"
#include "CLI.h"
#include "DisplayUI.h"
#include "A_config.h"
#include "webfiles.h"

#include "LED.h"


LED led;
Settings settings;
Names    names;
SSIDs    ssids;
Accesspoints accesspoints;
Stations     stations;
Scan   scan;
Attack attack;
CLI    cli;
DisplayUI displayUI;

#include "wifi.h"

uint32_t autosaveTime = 0;
uint32_t currentTime  = 0;

bool booted = false;

void setup() {

    randomSeed(os_random());


    Serial.begin(115200);
    Serial.println();


    prnt(SETUP_MOUNT_SPIFFS);
    prntln(SPIFFS.begin() ? SETUP_OK : SETUP_ERROR);

    EEPROM.begin(4096);


    uint8_t bootCounter = EEPROM.read(0);

    if (bootCounter >= 3) {
        prnt(SETUP_FORMAT_SPIFFS);
        SPIFFS.format();
        prntln(SETUP_OK);
    } else {
        EEPROM.write(0, bootCounter + 1); 
        EEPROM.commit();
    }


    currentTime = millis();

    settings.load();

    wifi_set_macaddr(SOFTAP_IF, settings.getMacAP());

    WiFi.mode(WIFI_OFF);
    wifi_set_opmode(STATION_MODE);
    wifi_set_promiscuous_rx_cb([](uint8_t* buf, uint16_t len) {
        scan.sniffer(buf, len);
    });


    wifi_set_macaddr(STATION_IF, settings.getMacSt());

    if (settings.getDisplayInterface()) {
        displayUI.setup();
        displayUI.mode = displayUI.DISPLAY_MODE::INTRO;
    }

    copyWebFiles(false);


    names.load();
    ssids.load();
    cli.load();

    scan.setup();


    setWifiChannel(settings.getChannel());

    #ifdef DEFAULT_SSID
    if (settings.getSSID() == "pwned") settings.setSSID(DEFAULT_SSID);
    #endif 
    loadWifiConfigDefaults();

    if (settings.getCLI()) {
        cli.enable();
    } else {
        prntln(SETUP_SERIAL_WARNING);
        Serial.flush();
        Serial.end();
    }

    if (settings.getWebInterface()) startAP();

    prntln(SETUP_STARTED);

    prntln(settings.getVersion());

    led.setup();
}

void loop() {
    currentTime = millis();

    led.update();    
    wifiUpdate();    
    attack.update(); 
    displayUI.update();
    cli.update();    
    scan.update();   
    ssids.update(); 


    if (settings.getAutosave() && (currentTime - autosaveTime > settings.getAutosaveTime())) {
        autosaveTime = currentTime;
        names.save(false);
        ssids.save(false);
        settings.save(false);
    }

    if (!booted) {

        EEPROM.write(0, 0);
        EEPROM.commit();
        booted = true;
#ifdef HIGHLIGHT_LED
        displayUI.setupLED();
#endif 
    }
}
